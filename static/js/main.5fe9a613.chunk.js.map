{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","items","sort","a","b","key","listItems","map","item","className","type","id","value","text","onChange","e","updateItem","target","icon","onClick","deleteItem","speed","horizontal","duration","easing","style","height","library","add","faTrash","App","state","currentItem","preventDefault","newItem","this","newItems","setState","filteredItems","filter","length","Date","now","onSubmit","addItem","handleInput","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5fe9a613.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move';\nimport './ListItem.css'\n\nimport ScrollArea from 'react-scrollbar';\n\nconst ListItem = (props) => {\n    const items = props.items;\n\n    items.sort((a, b) => {\n        return a.key < b.key;\n    });\n\n    const listItems = items.map(item => {\n        return (\n            <div className=\"list-item\" key={item.key}>\n                <p>\n                    <input type=\"text\"\n                        id={item.key}\n                        value={item.text}\n                        onChange={(e) => props.updateItem(item.key, e.target.value)}\n                    />\n                    <span>\n                        <FontAwesomeIcon\n                            className=\"faicons\"\n                            icon=\"trash\"\n                            onClick={() => props.deleteItem(item.key)}\n                        />\n                    </span>\n                </p>\n            </div>\n        )\n    });\n\n    return (\n        <ScrollArea\n            speed={0.8}\n            horizontal={false}\n            className=\"list\">\n            <FlipMove duration={300} easing=\"ease-in-out\" style={{ height: '100%' }}>\n                {listItems}\n            </FlipMove>\n        </ScrollArea>\n    )\n}\n\nexport default ListItem;","import React from 'react';\nimport './App.css';\nimport ListItem from './ListItem';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n  // App constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: '',\n        key: ''\n      }\n    }\n  }\n\n  // Add new item\n  addItem(e) {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if (newItem.text !== '') {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          key: '',\n          text: ''\n        }\n      });\n    }\n  }\n\n  // Delete existing item\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(\n      item => item.key !== key\n    );\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  // Update value of item\n  updateItem(key, value) {\n    if (value.length < 1) {\n      const filteredItems = this.state.items.filter(\n        item => item.key !== key\n      );\n      this.setState({\n        items: filteredItems\n      })\n    } else {\n      const newItems = this.state.items.map((item) => {\n        if (item.key === key) {\n          return {\n            key: key,\n            text: value\n          }\n        }\n\n        return item\n      });\n\n      this.setState({\n        items: newItems\n      })\n    }\n  }\n\n  // Handle input\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  // Component rendering\n  render() {\n    return (\n      <div className=\"App\" >\n        <header className=\"app__header\">\n          <h1>Todo List App</h1>\n          <form id=\"todoForm\" onSubmit={(e) => this.addItem(e)}>\n            <input\n              onChange={(e) => this.handleInput(e)}\n              value={this.state.currentItem.text}\n              type=\"text\"\n              placeholder=\"Enter Task\" />\n            <button type=\"submit\">Add</button>\n          </form>\n          <ListItem\n            items={this.state.items}\n            deleteItem={(key) => this.deleteItem(key)}\n            updateItem={(key, value) => this.updateItem(key, value)}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}